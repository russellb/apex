basePath: /
definitions:
  models.AddDevice:
    properties:
      child_prefix:
        example:
        - 172.16.42.0/24
        items:
          type: string
        type: array
      discovery:
        type: boolean
      endpoint_local_address_ip4:
        example: 1.2.3.4
        type: string
      endpoints:
        items:
          $ref: '#/definitions/models.Endpoint'
        type: array
      hostname:
        example: myhost
        type: string
      organization_id:
        example: 694aa002-5d19-495e-980b-3d8fd508ea10
        type: string
      os:
        type: string
      public_key:
        type: string
      relay:
        type: boolean
      security_group_id:
        type: string
      symmetric_nat:
        type: boolean
      tunnel_ip:
        example: 1.2.3.4
        type: string
      tunnel_ip_v6:
        example: 200::1
        type: string
      user_id:
        example: 694aa002-5d19-495e-980b-3d8fd508ea10
        type: string
    type: object
  models.AddInvitation:
    properties:
      organization_id:
        type: string
      user_id:
        description: The user id to invite (one of username or user_id is required)
        type: string
      user_name:
        description: The username to invite (one of username or user_id is required)
        type: string
    type: object
  models.AddOrganization:
    properties:
      cidr:
        example: 172.16.42.0/24
        type: string
      cidr_v6:
        example: 0200::/8
        type: string
      description:
        example: The Red Zone
        type: string
      hub_zone:
        type: boolean
      name:
        example: zone-red
        type: string
      security_group_id:
        type: string
    type: object
  models.AddSecurityGroup:
    properties:
      group_description:
        example: group_description
        type: string
      group_name:
        example: group_name
        type: string
      inbound_rules:
        items:
          $ref: '#/definitions/models.SecurityRule'
        type: array
      org_id:
        type: string
      outbound_rules:
        items:
          $ref: '#/definitions/models.SecurityRule'
        type: array
    type: object
  models.BaseError:
    properties:
      error:
        example: something bad
        type: string
    type: object
  models.ConflictsError:
    properties:
      error:
        example: something bad
        type: string
      id:
        example: a1fae5de-dd96-4b20-8362-95f6a574c4b1
        type: string
    type: object
  models.Device:
    properties:
      allowed_ips:
        items:
          type: string
        type: array
      child_prefix:
        items:
          type: string
        type: array
      discovery:
        type: boolean
      endpoint_local_address_ip4:
        type: string
      endpoints:
        items:
          $ref: '#/definitions/models.Endpoint'
        type: array
      hostname:
        type: string
      id:
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      organization_id:
        type: string
      organization_prefix:
        type: string
      organization_prefix_v6:
        type: string
      os:
        type: string
      public_key:
        type: string
      relay:
        type: boolean
      revision:
        type: integer
      security_group_id:
        type: string
      symmetric_nat:
        type: boolean
      tunnel_ip:
        type: string
      tunnel_ip_v6:
        type: string
      user_id:
        type: string
    type: object
  models.DeviceMetadata:
    properties:
      device_id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
    type: object
  models.DeviceMetadataValue:
    properties:
      value:
        type: string
    type: object
  models.DeviceStartResponse:
    properties:
      client_id:
        type: string
      device_authorization_endpoint:
        description: |-
          TODO: Remove this once golang/oauth2 supports device flow
          and when coreos/go-oidc adds device_authorization_endpoint discovery
        type: string
      issuer:
        type: string
    type: object
  models.Endpoint:
    properties:
      address:
        description: IP address and port of the endpoint.
        example: 10.1.1.1:51820
        type: string
      distance:
        description: Distance in milliseconds from the node to the ip address
        example: 12
        type: integer
      source:
        description: How the endpoint was discovered
        type: string
    type: object
  models.Invitation:
    properties:
      expiry:
        type: string
      id:
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      organization_id:
        type: string
      user_id:
        type: string
    type: object
  models.LoginEndRequest:
    properties:
      request_url:
        type: string
    type: object
  models.LoginEndResponse:
    properties:
      handled:
        type: boolean
      logged_in:
        type: boolean
    type: object
  models.LoginStartResponse:
    properties:
      authorization_request_url:
        type: string
    type: object
  models.LogoutResponse:
    properties:
      logout_url:
        type: string
    type: object
  models.Organization:
    properties:
      cidr:
        type: string
      cidr_v6:
        type: string
      description:
        type: string
      hub_zone:
        type: boolean
      id:
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      invitations:
        items:
          $ref: '#/definitions/models.Invitation'
        type: array
      name:
        type: string
      owner_id:
        type: string
      security_group_id:
        type: string
    type: object
  models.SecurityGroup:
    properties:
      group_description:
        type: string
      group_name:
        type: string
      id:
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      inbound_rules:
        items:
          $ref: '#/definitions/models.SecurityRule'
        type: array
      org_id:
        type: string
      outbound_rules:
        items:
          $ref: '#/definitions/models.SecurityRule'
        type: array
    type: object
  models.SecurityRule:
    properties:
      from_port:
        type: integer
      ip_protocol:
        type: string
      ip_ranges:
        items:
          type: string
        type: array
      to_port:
        type: integer
    type: object
  models.UpdateDevice:
    properties:
      child_prefix:
        example:
        - 172.16.42.0/24
        items:
          type: string
        type: array
      endpoint_local_address_ip4:
        example: 1.2.3.4
        type: string
      endpoints:
        items:
          $ref: '#/definitions/models.Endpoint'
        type: array
      hostname:
        example: myhost
        type: string
      organization_id:
        example: 694aa002-5d19-495e-980b-3d8fd508ea10
        type: string
      revision:
        type: integer
      symmetric_nat:
        type: boolean
    type: object
  models.UpdateSecurityGroup:
    properties:
      group_description:
        type: string
      group_name:
        type: string
      inbound_rules:
        items:
          $ref: '#/definitions/models.SecurityRule'
        type: array
      outbound_rules:
        items:
          $ref: '#/definitions/models.SecurityRule'
        type: array
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        description: Since the ID comes from the IDP, we have no control over the
          format...
        example: aa22666c-0f57-45cb-a449-16efecc04f2e
        type: string
      security_group_id:
        type: string
      updatedAt:
        type: string
      userName:
        type: string
    type: object
  models.UserInfoResponse:
    properties:
      family_name:
        type: string
      given_name:
        type: string
      picture:
        type: string
      preferred_username:
        type: string
      sub:
        type: string
      updated_at:
        type: integer
    type: object
info:
  contact:
    name: The Nexodus Authors
    url: https://github.com/nexodus-io/nexodus/issues
  description: This is the Nexodus API Server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Nexodus API
  version: "1.0"
paths:
  /api/devices:
    get:
      consumes:
      - application/json
      description: Lists all devices
      operationId: ListDevices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Devices
      tags:
      - Devices
    post:
      consumes:
      - application/json
      description: Adds a new device
      operationId: CreateDevice
      parameters:
      - description: Add Device
        in: body
        name: Device
        required: true
        schema:
          $ref: '#/definitions/models.AddDevice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ConflictsError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Add Devices
      tags:
      - Devices
  /api/devices/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing device and associated IPAM lease
      operationId: DeleteDevice
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete Device
      tags:
      - Devices
    get:
      consumes:
      - application/json
      description: Gets a device by ID
      operationId: GetDevice
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Devices
      tags:
      - Devices
    patch:
      consumes:
      - application/json
      description: Updates a device by ID
      operationId: UpdateDevice
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Device Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDevice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Update Devices
      tags:
      - Devices
  /api/devices/{id}/metadata:
    get:
      consumes:
      - application/json
      description: Lists metadata for a device
      operationId: GetDeviceMetadata
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeviceMetadata'
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Device Metadata
      tags:
      - Devices
    post:
      consumes:
      - application/json
      description: Delete all metadata for a device
      operationId: DeleteDeviceMetadata
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Metadata Key
        in: path
        name: key
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete all Device metadata
      tags:
      - Devices
  /api/devices/{id}/metadata/{key}:
    get:
      consumes:
      - application/json
      description: Get metadata for a device
      operationId: GetDeviceMetadataKey
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Metadata Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeviceMetadataValue'
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Device Metadata
      tags:
      - Devices
    post:
      consumes:
      - application/json
      description: Delete a metadata key for a device
      operationId: DeleteDeviceMetadataKey
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Metadata Key
        in: path
        name: key
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete a Device metadata key
      tags:
      - Devices
  /api/fflags:
    get:
      consumes:
      - application/json
      description: Lists all feature flags
      operationId: ListFeatureFlags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Feature Flags
      tags:
      - FFlag
  /api/fflags/{name}:
    get:
      consumes:
      - application/json
      description: Gets a Feature Flag by name
      operationId: GetFeatureFlag
      parameters:
      - description: feature flag name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Feature Flag
      tags:
      - FFlag
  /api/invitations:
    get:
      consumes:
      - application/json
      description: Lists all invitations
      operationId: ListInvitations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Invitation'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Invitations
      tags:
      - Invitation
    post:
      consumes:
      - application/json
      description: Create an invitation to an organization
      operationId: CreateInvitation
      parameters:
      - description: Add Invitation
        in: body
        name: Invitation
        required: true
        schema:
          $ref: '#/definitions/models.AddInvitation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Invitation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Create an invitation
      tags:
      - Invitation
  /api/invitations/:invitation/accept:
    post:
      consumes:
      - application/json
      description: Accept an invitation to an organization
      operationId: AcceptInvitation
      parameters:
      - description: Invitation ID
        in: path
        name: invitation
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Accept an invitation
      tags:
      - Invitation
  /api/invitations/{invitation}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing invitation
      operationId: DeleteInvitation
      parameters:
      - description: Invitation ID
        in: path
        name: invitation
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete Invitation
      tags:
      - Invitation
  /api/organizations:
    get:
      consumes:
      - application/json
      description: Lists all Organizations
      operationId: ListOrganizations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Organization'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Organizations
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Creates a named organization with the given CIDR
      operationId: CreateOrganization
      parameters:
      - description: Add Organization
        in: body
        name: Organization
        required: true
        schema:
          $ref: '#/definitions/models.AddOrganization'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.BaseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ConflictsError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Create an Organization
      tags:
      - Organizations
  /api/organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing organization and associated IPAM prefix
      operationId: DeleteOrganization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete Organization
      tags:
      - Organizations
    get:
      consumes:
      - application/json
      description: Gets a Organization by Organization ID
      operationId: GetOrganizations
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Organizations
      tags:
      - Organizations
  /api/organizations/{id}/devices:
    get:
      consumes:
      - application/json
      description: Lists all users for this Organization
      operationId: ListUsersInOrganization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Users
      tags:
      - Users
  /api/organizations/{organization_id}/devices:
    get:
      consumes:
      - application/json
      description: Lists all devices for this Organization
      operationId: ListDevicesInOrganization
      parameters:
      - description: greater than revision
        in: query
        name: gt_revision
        type: integer
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Devices
      tags:
      - Devices
  /api/organizations/{organization_id}/devices/{device_id}:
    get:
      consumes:
      - application/json
      description: Gets a device in a organization by ID
      operationId: GetDeviceInOrganization
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Device ID
        in: path
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get Device
      tags:
      - Devices
  /api/organizations/{organization_id}/security_group/{id}:
    get:
      description: Gets a security group in an organization by ID
      operationId: GetSecurityGroup
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SecurityGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get SecurityGroup
      tags:
      - SecurityGroup
  /api/organizations/{organization_id}/security_groups:
    get:
      description: Lists all Security Groups
      operationId: ListSecurityGroups
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SecurityGroup'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Security Groups
      tags:
      - SecurityGroup
    post:
      description: Adds a new Security Group
      operationId: CreateSecurityGroup
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Add SecurityGroup
        in: body
        name: SecurityGroup
        required: true
        schema:
          $ref: '#/definitions/models.AddSecurityGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SecurityGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ConflictsError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Add SecurityGroup
      tags:
      - SecurityGroup
  /api/organizations/{organization_id}/security_groups/{security_group_id}:
    delete:
      description: Deletes an existing SecurityGroup
      operationId: DeleteSecurityGroup
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: security_group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.SecurityGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete SecurityGroup
      tags:
      - SecurityGroup
    patch:
      description: Updates a Security Group by ID
      operationId: UpdateSecurityGroup
      parameters:
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: security_group_id
        required: true
        type: string
      - description: Security Group Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSecurityGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SecurityGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Update Security Group
      tags:
      - SecurityGroup
  /api/users:
    get:
      consumes:
      - application/json
      description: Lists all users
      operationId: ListUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: List Users
      tags:
      - Users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      operationId: DeleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Delete User
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Gets a user
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BaseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.BaseError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Get User
      tags:
      - Users
  /api/users/{id}/organizations/{organization}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing organization associated to a user
      operationId: DeleteUserFromOrganization
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization ID
        in: path
        name: organization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BaseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BaseError'
      summary: Remove a User from an Organization
      tags:
      - Users
  /device/login/start:
    post:
      description: Starts a device login request
      operationId: DeviceStart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeviceStartResponse'
      summary: Start Login
      tags:
      - Auth
  /web/claims:
    get:
      description: Gets the claims of the users access token
      operationId: Claims
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Claims
      tags:
      - Auth
  /web/login/end:
    post:
      description: Called auth server redirect to finish the Oauth login
      operationId: WebEnd
      parameters:
      - description: End Login
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.LoginEndRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginEndResponse'
      summary: End Web Login
      tags:
      - Auth
  /web/login/start:
    post:
      description: Starts a login request for the frontend application
      operationId: WebStart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginStartResponse'
      summary: Start Web Login
      tags:
      - Auth
  /web/logout:
    post:
      description: Returns the URL to logout the current user
      operationId: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LogoutResponse'
      summary: Logout
      tags:
      - Auth
  /web/refresh:
    get:
      description: Refreshes the access token
      operationId: Refresh
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Refresh
      tags:
      - Auth
  /web/user_info:
    get:
      description: Returns information about the currently logged-in user
      operationId: UserInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserInfoResponse'
      summary: User Info
      tags:
      - Auth
securityDefinitions:
  OAuth2Implicit:
    authorizationUrl: https://auth.try.nexodus.127.0.0.1.nip.io/
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      user: ' Grants read and write access to resources owned by this user'
    type: oauth2
swagger: "2.0"
